=begin
#カラーミーショップ API

## カラーミーショップ API  ## 利用手順  ### OAuthアプリケーションの登録  デベロッパーアカウントをお持ちでない場合は作成します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリ登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURIに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  ### 認可  カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリ詳細画面で確認できるクライアントID| |`response_type`|\"code\"を指定| |`scope`| 別表参照| |`redirect_uri`|アプリ登録時に入力したリダイレクトURI|  `scope`は、以下のうち、アプリが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新| |`read_shop_coupons`|ショップクーポンの参照|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのログインIDとパスワードの入力を求められます。  ログイン後の認証ページでアプリとの連携が承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリ登録時のリダイレクトURIに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされ、 認可コードがURLの末尾に付与されます。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  ### 認可コードをアクセストークンに交換  以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリ詳細画面に表示されているクライアントID| |`client_secret`|アプリ詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"を指定| |`redirect_uri`|アプリ登録時に入力したリダイレクトURI|  curlによるリクエストの例を以下に示します。 ```console $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返却されます  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、[許可済みアプリ一覧画面](https://admin.shop-pro.jp/?mode=app_use_lst)から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  ### APIの利用  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する例を示します。  ```console $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPIでは、以下の形式の配列でエラーを表現します。  - `code` エラーコード - `message` エラーメッセージ - `status` ステータスコード  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```  ## 都道府県コードについて APIを利用して都道府県コードを更新したり、レスポンスを参照される際には以下の表を参考にしてください。  <details>   <summary>都道府県コード一覧</summary>    |id|都道府県|   |---|---|   |1|北海道|   |2|青森県|   |3|岩手県|   |4|秋田県|   |5|宮城県|   |6|山形県|   |7|福島県|   |8|茨城県|   |9|栃木県|   |10|群馬県|   |11|埼玉県|   |12|千葉県|   |13|東京都|   |14|神奈川県|   |15|新潟県|   |16|福井県|   |17|石川県|   |18|富山県|   |19|静岡県|   |20|山梨県|   |21|長野県|   |22|愛知県|   |23|岐阜県|   |24|三重県|   |25|和歌山県|   |26|滋賀県|   |27|奈良県|   |28|京都府|   |29|大阪府|   |30|兵庫県|   |31|岡山県|   |32|広島県|   |33|鳥取県|   |34|島根県|   |35|山口県|   |36|香川県|   |37|徳島県|   |38|愛媛県|   |39|高知県|   |40|福岡県|   |41|佐賀県|   |42|長崎県|   |43|大分県|   |44|熊本県|   |45|宮崎県|   |46|鹿児島県|   |47|沖縄県|   |48|海外|  </details> 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0-SNAPSHOT

=end

require 'date'
require 'time'

module ColorMeShop
  class GetSales200ResponseSalesInnerDetailsInner
    # 受注明細ID
    attr_accessor :id

    # 売上ID
    attr_accessor :sale_id

    # ショップアカウントID
    attr_accessor :account_id

    # 商品ID
    attr_accessor :product_id

    # お届け先ID
    attr_accessor :sale_delivery_id

    # オプション1の値(最新の商品情報)
    attr_accessor :option1_value

    # オプション2の値(最新の商品情報)
    attr_accessor :option2_value

    # オプション1の値の選択肢中の位置
    attr_accessor :option1_index

    # オプション2の値の選択肢中の位置
    attr_accessor :option2_index

    # 型番
    attr_accessor :product_model_number

    # 商品名(最新の商品情報)
    attr_accessor :product_name

    # 商品名とオプション名(注文時の商品情報)
    attr_accessor :pristine_product_full_name

    # 商品原価
    attr_accessor :product_cost

    # 商品画像URL
    attr_accessor :product_image_url

    # サムネイル用商品画像URL
    attr_accessor :product_thumbnail_image_url

    # モバイル用商品画像URL
    attr_accessor :product_mobile_image_url

    # 商品販売価格
    attr_accessor :price

    # 税込み商品価格
    attr_accessor :price_with_tax

    # 商品点数
    attr_accessor :product_num

    # 単位
    attr_accessor :unit

    # 商品小計。販売価格と点数の積
    attr_accessor :subtotal_price

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'sale_id' => :'sale_id',
        :'account_id' => :'account_id',
        :'product_id' => :'product_id',
        :'sale_delivery_id' => :'sale_delivery_id',
        :'option1_value' => :'option1_value',
        :'option2_value' => :'option2_value',
        :'option1_index' => :'option1_index',
        :'option2_index' => :'option2_index',
        :'product_model_number' => :'product_model_number',
        :'product_name' => :'product_name',
        :'pristine_product_full_name' => :'pristine_product_full_name',
        :'product_cost' => :'product_cost',
        :'product_image_url' => :'product_image_url',
        :'product_thumbnail_image_url' => :'product_thumbnail_image_url',
        :'product_mobile_image_url' => :'product_mobile_image_url',
        :'price' => :'price',
        :'price_with_tax' => :'price_with_tax',
        :'product_num' => :'product_num',
        :'unit' => :'unit',
        :'subtotal_price' => :'subtotal_price'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'sale_id' => :'Integer',
        :'account_id' => :'String',
        :'product_id' => :'Integer',
        :'sale_delivery_id' => :'Integer',
        :'option1_value' => :'String',
        :'option2_value' => :'String',
        :'option1_index' => :'Integer',
        :'option2_index' => :'Integer',
        :'product_model_number' => :'String',
        :'product_name' => :'String',
        :'pristine_product_full_name' => :'String',
        :'product_cost' => :'Integer',
        :'product_image_url' => :'String',
        :'product_thumbnail_image_url' => :'String',
        :'product_mobile_image_url' => :'String',
        :'price' => :'Integer',
        :'price_with_tax' => :'Integer',
        :'product_num' => :'Integer',
        :'unit' => :'String',
        :'subtotal_price' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'sale_delivery_id',
        :'option1_value',
        :'option2_value',
        :'option1_index',
        :'option2_index',
        :'product_cost',
        :'product_image_url',
        :'product_thumbnail_image_url',
        :'product_mobile_image_url',
        :'unit',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ColorMeShop::GetSales200ResponseSalesInnerDetailsInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ColorMeShop::GetSales200ResponseSalesInnerDetailsInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'sale_id')
        self.sale_id = attributes[:'sale_id']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.key?(:'sale_delivery_id')
        self.sale_delivery_id = attributes[:'sale_delivery_id']
      end

      if attributes.key?(:'option1_value')
        self.option1_value = attributes[:'option1_value']
      end

      if attributes.key?(:'option2_value')
        self.option2_value = attributes[:'option2_value']
      end

      if attributes.key?(:'option1_index')
        self.option1_index = attributes[:'option1_index']
      end

      if attributes.key?(:'option2_index')
        self.option2_index = attributes[:'option2_index']
      end

      if attributes.key?(:'product_model_number')
        self.product_model_number = attributes[:'product_model_number']
      end

      if attributes.key?(:'product_name')
        self.product_name = attributes[:'product_name']
      end

      if attributes.key?(:'pristine_product_full_name')
        self.pristine_product_full_name = attributes[:'pristine_product_full_name']
      end

      if attributes.key?(:'product_cost')
        self.product_cost = attributes[:'product_cost']
      end

      if attributes.key?(:'product_image_url')
        self.product_image_url = attributes[:'product_image_url']
      end

      if attributes.key?(:'product_thumbnail_image_url')
        self.product_thumbnail_image_url = attributes[:'product_thumbnail_image_url']
      end

      if attributes.key?(:'product_mobile_image_url')
        self.product_mobile_image_url = attributes[:'product_mobile_image_url']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'price_with_tax')
        self.price_with_tax = attributes[:'price_with_tax']
      end

      if attributes.key?(:'product_num')
        self.product_num = attributes[:'product_num']
      end

      if attributes.key?(:'unit')
        self.unit = attributes[:'unit']
      end

      if attributes.key?(:'subtotal_price')
        self.subtotal_price = attributes[:'subtotal_price']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          sale_id == o.sale_id &&
          account_id == o.account_id &&
          product_id == o.product_id &&
          sale_delivery_id == o.sale_delivery_id &&
          option1_value == o.option1_value &&
          option2_value == o.option2_value &&
          option1_index == o.option1_index &&
          option2_index == o.option2_index &&
          product_model_number == o.product_model_number &&
          product_name == o.product_name &&
          pristine_product_full_name == o.pristine_product_full_name &&
          product_cost == o.product_cost &&
          product_image_url == o.product_image_url &&
          product_thumbnail_image_url == o.product_thumbnail_image_url &&
          product_mobile_image_url == o.product_mobile_image_url &&
          price == o.price &&
          price_with_tax == o.price_with_tax &&
          product_num == o.product_num &&
          unit == o.unit &&
          subtotal_price == o.subtotal_price
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, sale_id, account_id, product_id, sale_delivery_id, option1_value, option2_value, option1_index, option2_index, product_model_number, product_name, pristine_product_full_name, product_cost, product_image_url, product_thumbnail_image_url, product_mobile_image_url, price, price_with_tax, product_num, unit, subtotal_price].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ColorMeShop.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
