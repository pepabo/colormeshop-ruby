=begin
#カラーミーショップ API

## カラーミーショップ API  ## 利用手順  ### OAuthアプリケーションの登録  デベロッパーアカウントをお持ちでない場合は作成します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリ登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURIに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  ### 認可  カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリ詳細画面で確認できるクライアントID| |`response_type`|\"code\"を指定| |`scope`| 別表参照| |`redirect_uri`|アプリ登録時に入力したリダイレクトURI|  `scope`は、以下のうち、アプリが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新| |`read_shop_coupons`|ショップクーポンの参照|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのログインIDとパスワードの入力を求められます。  ログイン後の認証ページでアプリとの連携が承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリ登録時のリダイレクトURIに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされ、 認可コードがURLの末尾に付与されます。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  ### 認可コードをアクセストークンに交換  以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリ詳細画面に表示されているクライアントID| |`client_secret`|アプリ詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"を指定| |`redirect_uri`|アプリ登録時に入力したリダイレクトURI|  curlによるリクエストの例を以下に示します。 ```console $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返却されます  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、[許可済みアプリ一覧画面](https://admin.shop-pro.jp/?mode=app_use_lst)から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  ### APIの利用  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する例を示します。  ```console $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPIでは、以下の形式の配列でエラーを表現します。  - `code` エラーコード - `message` エラーメッセージ - `status` ステータスコード  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```  ## 都道府県コードについて APIを利用して都道府県コードを更新したり、レスポンスを参照される際には以下の表を参考にしてください。  <details>   <summary>都道府県コード一覧</summary>    |id|都道府県|   |---|---|   |1|北海道|   |2|青森県|   |3|岩手県|   |4|秋田県|   |5|宮城県|   |6|山形県|   |7|福島県|   |8|茨城県|   |9|栃木県|   |10|群馬県|   |11|埼玉県|   |12|千葉県|   |13|東京都|   |14|神奈川県|   |15|新潟県|   |16|福井県|   |17|石川県|   |18|富山県|   |19|静岡県|   |20|山梨県|   |21|長野県|   |22|愛知県|   |23|岐阜県|   |24|三重県|   |25|和歌山県|   |26|滋賀県|   |27|奈良県|   |28|京都府|   |29|大阪府|   |30|兵庫県|   |31|岡山県|   |32|広島県|   |33|鳥取県|   |34|島根県|   |35|山口県|   |36|香川県|   |37|徳島県|   |38|愛媛県|   |39|高知県|   |40|福岡県|   |41|佐賀県|   |42|長崎県|   |43|大分県|   |44|熊本県|   |45|宮崎県|   |46|鹿児島県|   |47|沖縄県|   |48|海外|  </details> 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0-SNAPSHOT

=end

require 'cgi'

module ColorMeShop
  class ProductApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # おすすめ商品情報の削除
    # 商品に付加されたおすすめ商品情報を削除します
    # @param product_id [Integer] 商品ID
    # @param pickup_type [Integer] おすすめ商品情報種別（0:おすすめ商品, 1:売れ筋商品, 3:新着商品, 4:イチオシ商品）
    # @param [Hash] opts the optional parameters
    # @return [PutProductPickup200Response]
    def delete_product_pickup(product_id, pickup_type, opts = {})
      data, _status_code, _headers = delete_product_pickup_with_http_info(product_id, pickup_type, opts)
      data
    end

    # おすすめ商品情報の削除
    # 商品に付加されたおすすめ商品情報を削除します
    # @param product_id [Integer] 商品ID
    # @param pickup_type [Integer] おすすめ商品情報種別（0:おすすめ商品, 1:売れ筋商品, 3:新着商品, 4:イチオシ商品）
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutProductPickup200Response, Integer, Hash)>] PutProductPickup200Response data, response status code and response headers
    def delete_product_pickup_with_http_info(product_id, pickup_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.delete_product_pickup ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.delete_product_pickup"
      end
      # verify the required parameter 'pickup_type' is set
      if @api_client.config.client_side_validation && pickup_type.nil?
        fail ArgumentError, "Missing the required parameter 'pickup_type' when calling ProductApi.delete_product_pickup"
      end
      # resource path
      local_var_path = '/v1/products/{product_id}/pickups/{pickup_type}'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s)).sub('{' + 'pickup_type' + '}', CGI.escape(pickup_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PutProductPickup200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ProductApi.delete_product_pickup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#delete_product_pickup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 商品データの取得
    # 
    # @param product_id [Integer] 商品ID
    # @param [Hash] opts the optional parameters
    # @return [PostProducts200Response]
    def get_product(product_id, opts = {})
      data, _status_code, _headers = get_product_with_http_info(product_id, opts)
      data
    end

    # 商品データの取得
    # 
    # @param product_id [Integer] 商品ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostProducts200Response, Integer, Hash)>] PostProducts200Response data, response status code and response headers
    def get_product_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.get_product ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.get_product"
      end
      # resource path
      local_var_path = '/v1/products/{product_id}'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostProducts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ProductApi.get_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#get_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 商品オプション一覧の取得
    # 
    # @param product_id [Integer] 商品ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model_number 型番で部分一致検索
    # @option opts [String] :fields レスポンスJSONのキーをカンマ区切りで指定
    # @option opts [Integer] :limit レスポンスの件数を指定。指定がない場合は10。最大50
    # @option opts [Integer] :offset 指定した数値+1件目以降のデータを返す
    # @return [GetProductVariants200Response]
    def get_product_variants(product_id, opts = {})
      data, _status_code, _headers = get_product_variants_with_http_info(product_id, opts)
      data
    end

    # 商品オプション一覧の取得
    # 
    # @param product_id [Integer] 商品ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model_number 型番で部分一致検索
    # @option opts [String] :fields レスポンスJSONのキーをカンマ区切りで指定
    # @option opts [Integer] :limit レスポンスの件数を指定。指定がない場合は10。最大50
    # @option opts [Integer] :offset 指定した数値+1件目以降のデータを返す
    # @return [Array<(GetProductVariants200Response, Integer, Hash)>] GetProductVariants200Response data, response status code and response headers
    def get_product_variants_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.get_product_variants ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.get_product_variants"
      end
      # resource path
      local_var_path = '/v1/products/{product_id}/variants'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'model_number'] = opts[:'model_number'] if !opts[:'model_number'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProductVariants200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ProductApi.get_product_variants",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#get_product_variants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 商品一覧の取得
    # 商品一覧を取得します。  オプションやバリエーションの数が多い場合、レスポンスの返却に時間がかかる場合があります。 `fields` リクエストパラメータで必要なキーを指定することを推奨します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ids 商品IDで検索。カンマ区切りにすることで複数検索が可能
    # @option opts [Integer] :category_id_big 大カテゴリーIDで検索
    # @option opts [Integer] :category_id_small 小カテゴリーIDで検索
    # @option opts [Integer] :group_ids グループIDで検索。カンマ区切りにすることで複数検索が可能
    # @option opts [String] :model_number 型番で部分一致検索
    # @option opts [String] :name 商品名で部分一致検索
    # @option opts [String] :display_state 掲載設定で検索  - &#x60;showing&#x60;: 掲載状態 - &#x60;hidden&#x60;: 非掲載状態 - &#x60;showing_for_members&#x60;: 会員にのみ掲載 - &#x60;sale_for_members&#x60;: 掲載状態だが購入は会員のみ可能 
    # @option opts [Integer] :stocks 在庫管理している商品のうち、在庫数が指定した数値以下の商品を検索。オプションごとに在庫管理している商品は、オプションごとの在庫数で検索される
    # @option opts [Boolean] :stock_managed &#x60;true&#x60;の場合、在庫管理している商品を検索
    # @option opts [Boolean] :recent_zero_stocks &#x60;true&#x60; の場合、過去1週間以内に更新された商品から検索
    # @option opts [String] :make_date_min 指定日時以降に作成された商品から検索
    # @option opts [String] :make_date_max 指定日時以前に作成された商品から検索
    # @option opts [String] :update_date_min 指定日時以降に更新された商品から検索
    # @option opts [String] :update_date_max 指定日時以前に更新された商品から検索
    # @option opts [String] :fields レスポンスJSONのキーをカンマ区切りで指定
    # @option opts [Integer] :limit レスポンスの件数を指定。指定がない場合は10。最大50
    # @option opts [Integer] :offset 指定した数値+1件目以降のデータを返す
    # @return [GetProducts200Response]
    def get_products(opts = {})
      data, _status_code, _headers = get_products_with_http_info(opts)
      data
    end

    # 商品一覧の取得
    # 商品一覧を取得します。  オプションやバリエーションの数が多い場合、レスポンスの返却に時間がかかる場合があります。 &#x60;fields&#x60; リクエストパラメータで必要なキーを指定することを推奨します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ids 商品IDで検索。カンマ区切りにすることで複数検索が可能
    # @option opts [Integer] :category_id_big 大カテゴリーIDで検索
    # @option opts [Integer] :category_id_small 小カテゴリーIDで検索
    # @option opts [Integer] :group_ids グループIDで検索。カンマ区切りにすることで複数検索が可能
    # @option opts [String] :model_number 型番で部分一致検索
    # @option opts [String] :name 商品名で部分一致検索
    # @option opts [String] :display_state 掲載設定で検索  - &#x60;showing&#x60;: 掲載状態 - &#x60;hidden&#x60;: 非掲載状態 - &#x60;showing_for_members&#x60;: 会員にのみ掲載 - &#x60;sale_for_members&#x60;: 掲載状態だが購入は会員のみ可能 
    # @option opts [Integer] :stocks 在庫管理している商品のうち、在庫数が指定した数値以下の商品を検索。オプションごとに在庫管理している商品は、オプションごとの在庫数で検索される
    # @option opts [Boolean] :stock_managed &#x60;true&#x60;の場合、在庫管理している商品を検索
    # @option opts [Boolean] :recent_zero_stocks &#x60;true&#x60; の場合、過去1週間以内に更新された商品から検索
    # @option opts [String] :make_date_min 指定日時以降に作成された商品から検索
    # @option opts [String] :make_date_max 指定日時以前に作成された商品から検索
    # @option opts [String] :update_date_min 指定日時以降に更新された商品から検索
    # @option opts [String] :update_date_max 指定日時以前に更新された商品から検索
    # @option opts [String] :fields レスポンスJSONのキーをカンマ区切りで指定
    # @option opts [Integer] :limit レスポンスの件数を指定。指定がない場合は10。最大50
    # @option opts [Integer] :offset 指定した数値+1件目以降のデータを返す
    # @return [Array<(GetProducts200Response, Integer, Hash)>] GetProducts200Response data, response status code and response headers
    def get_products_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.get_products ...'
      end
      allowable_values = ["showing", "hidden", "showing_for_members", "sale_for_members"]
      if @api_client.config.client_side_validation && opts[:'display_state'] && !allowable_values.include?(opts[:'display_state'])
        fail ArgumentError, "invalid value for \"display_state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/products'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'category_id_big'] = opts[:'category_id_big'] if !opts[:'category_id_big'].nil?
      query_params[:'category_id_small'] = opts[:'category_id_small'] if !opts[:'category_id_small'].nil?
      query_params[:'group_ids'] = opts[:'group_ids'] if !opts[:'group_ids'].nil?
      query_params[:'model_number'] = opts[:'model_number'] if !opts[:'model_number'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'display_state'] = opts[:'display_state'] if !opts[:'display_state'].nil?
      query_params[:'stocks'] = opts[:'stocks'] if !opts[:'stocks'].nil?
      query_params[:'stock_managed'] = opts[:'stock_managed'] if !opts[:'stock_managed'].nil?
      query_params[:'recent_zero_stocks'] = opts[:'recent_zero_stocks'] if !opts[:'recent_zero_stocks'].nil?
      query_params[:'make_date_min'] = opts[:'make_date_min'] if !opts[:'make_date_min'].nil?
      query_params[:'make_date_max'] = opts[:'make_date_max'] if !opts[:'make_date_max'].nil?
      query_params[:'update_date_min'] = opts[:'update_date_min'] if !opts[:'update_date_min'].nil?
      query_params[:'update_date_max'] = opts[:'update_date_max'] if !opts[:'update_date_max'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetProducts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ProductApi.get_products",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#get_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # おすすめ商品情報の追加
    # おすすめ商品情報(おすすめ商品、売れ筋商品、新着商品、イチオシ商品のいずれか)を商品に追加します。
    # @param product_id [Integer] 商品ID
    # @param put_product_pickup_request [PutProductPickupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PutProductPickup200Response]
    def post_product_pickup(product_id, put_product_pickup_request, opts = {})
      data, _status_code, _headers = post_product_pickup_with_http_info(product_id, put_product_pickup_request, opts)
      data
    end

    # おすすめ商品情報の追加
    # おすすめ商品情報(おすすめ商品、売れ筋商品、新着商品、イチオシ商品のいずれか)を商品に追加します。
    # @param product_id [Integer] 商品ID
    # @param put_product_pickup_request [PutProductPickupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutProductPickup200Response, Integer, Hash)>] PutProductPickup200Response data, response status code and response headers
    def post_product_pickup_with_http_info(product_id, put_product_pickup_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.post_product_pickup ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.post_product_pickup"
      end
      # verify the required parameter 'put_product_pickup_request' is set
      if @api_client.config.client_side_validation && put_product_pickup_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_product_pickup_request' when calling ProductApi.post_product_pickup"
      end
      # resource path
      local_var_path = '/v1/products/{product_id}/pickups'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_product_pickup_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutProductPickup200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ProductApi.post_product_pickup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#post_product_pickup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 商品データの追加
    # 
    # @param post_products_request [PostProductsRequest] 商品データ
    # @param [Hash] opts the optional parameters
    # @return [PostProducts200Response]
    def post_products(post_products_request, opts = {})
      data, _status_code, _headers = post_products_with_http_info(post_products_request, opts)
      data
    end

    # 商品データの追加
    # 
    # @param post_products_request [PostProductsRequest] 商品データ
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostProducts200Response, Integer, Hash)>] PostProducts200Response data, response status code and response headers
    def post_products_with_http_info(post_products_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.post_products ...'
      end
      # verify the required parameter 'post_products_request' is set
      if @api_client.config.client_side_validation && post_products_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_products_request' when calling ProductApi.post_products"
      end
      # resource path
      local_var_path = '/v1/products'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_products_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PostProducts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ProductApi.post_products",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#post_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # おすすめ商品情報の更新
    # おすすめ商品情報(おすすめ商品、売れ筋商品、新着商品、イチオシ商品のいずれか)を更新します。
    # @param product_id [Integer] 商品ID
    # @param put_product_pickup_request [PutProductPickupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PutProductPickup200Response]
    def put_product_pickup(product_id, put_product_pickup_request, opts = {})
      data, _status_code, _headers = put_product_pickup_with_http_info(product_id, put_product_pickup_request, opts)
      data
    end

    # おすすめ商品情報の更新
    # おすすめ商品情報(おすすめ商品、売れ筋商品、新着商品、イチオシ商品のいずれか)を更新します。
    # @param product_id [Integer] 商品ID
    # @param put_product_pickup_request [PutProductPickupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PutProductPickup200Response, Integer, Hash)>] PutProductPickup200Response data, response status code and response headers
    def put_product_pickup_with_http_info(product_id, put_product_pickup_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.put_product_pickup ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.put_product_pickup"
      end
      # verify the required parameter 'put_product_pickup_request' is set
      if @api_client.config.client_side_validation && put_product_pickup_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_product_pickup_request' when calling ProductApi.put_product_pickup"
      end
      # resource path
      local_var_path = '/v1/products/{product_id}/pickups'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_product_pickup_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PutProductPickup200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ProductApi.put_product_pickup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#put_product_pickup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 商品データの更新
    # 
    # @param product_id [Integer] 商品ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProductRequest] :update_product_request 商品データ
    # @return [PostProducts200Response]
    def update_product(product_id, opts = {})
      data, _status_code, _headers = update_product_with_http_info(product_id, opts)
      data
    end

    # 商品データの更新
    # 
    # @param product_id [Integer] 商品ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProductRequest] :update_product_request 商品データ
    # @return [Array<(PostProducts200Response, Integer, Hash)>] PostProducts200Response data, response status code and response headers
    def update_product_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.update_product ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.update_product"
      end
      # resource path
      local_var_path = '/v1/products/{product_id}'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_product_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostProducts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2']

      new_options = opts.merge(
        :operation => :"ProductApi.update_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#update_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
